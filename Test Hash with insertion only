#include <list>
#include <string>
#include <iostream>

// Step 1: Define the Entry Structure
struct HashTableEntry {
    std::string studentName; // The key
    int assignedNumber;      // The value

    // Constructor for convenience
    HashTableEntry(const std::string& name, int number) : studentName(name), assignedNumber(number) {}
};

// Step 2: Define the Hash Table
const int HASH_TABLE_SIZE = 10;
std::list<HashTableEntry> hashTable[HASH_TABLE_SIZE];

int hashFunction(const std::string& key) {
    int sum = 0;
    // Summing the ASCII values of the characters in the key
    for(char c : key) {
        sum += static_cast<int>(c);
    }
    // Applying modulo 10 to ensure it falls within our hash table slots
    return sum % HASH_TABLE_SIZE;
}

void insertEntry(const std::string& name, int number) {
    // Create a new HashTableEntry
    HashTableEntry newEntry(name, number);

    // Use the hash function to determine the slot index
    int index = hashFunction(name);

    // Append the new entry to the list in the corresponding slot
    // Since each slot is a std::list, we can directly push_back the new entry
    hashTable[index].push_back(newEntry);
}

void printHashTable() {
    for (int i = 0; i < HASH_TABLE_SIZE; ++i) {
        std::cout << "Slot " << i << ": ";
        for (const auto& entry : hashTable[i]) {
            std::cout << "[" << entry.studentName << ", " << entry.assignedNumber << "] ";
        }
        std::cout << std::endl;
    }
}

int main() {
    // Insert some test entries
    insertEntry("Alice", 1);
    insertEntry("Bob", 2);
    insertEntry("Charlie", 3);
    insertEntry("David", 4);
    insertEntry("Eve", 5);

    // Print the contents of the hash table to verify the insertion
    printHashTable();

    return 0;
}
